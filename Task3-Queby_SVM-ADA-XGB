{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn import model_selection\n",
    "from sklearn.utils import class_weight\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pianist_id</th>\n",
       "      <th>segment_id</th>\n",
       "      <th>snippet_id</th>\n",
       "      <th>essentia_dissonance_mean</th>\n",
       "      <th>essentia_dissonance_stdev</th>\n",
       "      <th>essentia_dynamic_complexity</th>\n",
       "      <th>essentia_loudness</th>\n",
       "      <th>essentia_onset_rate</th>\n",
       "      <th>essentia_pitch_salience_mean</th>\n",
       "      <th>essentia_pitch_salience_stdev</th>\n",
       "      <th>...</th>\n",
       "      <th>mirtoolbox_hcdf_pct_10</th>\n",
       "      <th>mirtoolbox_hcdf_pct_90</th>\n",
       "      <th>mirtoolbox_irregularity</th>\n",
       "      <th>mirtoolbox_keyclarity</th>\n",
       "      <th>mirtoolbox_mode</th>\n",
       "      <th>mirtoolbox_novelty_mean</th>\n",
       "      <th>mirtoolbox_novelty_pct_10</th>\n",
       "      <th>mirtoolbox_pulseclarity</th>\n",
       "      <th>mirtoolbox_roughness_mean</th>\n",
       "      <th>mirtoolbox_roughness_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.192237</td>\n",
       "      <td>0.059404</td>\n",
       "      <td>2.040252</td>\n",
       "      <td>16079768.0</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.677256</td>\n",
       "      <td>0.095846</td>\n",
       "      <td>...</td>\n",
       "      <td>0.077880</td>\n",
       "      <td>0.357389</td>\n",
       "      <td>0.685941</td>\n",
       "      <td>0.809092</td>\n",
       "      <td>-0.092027</td>\n",
       "      <td>0.041443</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.169743</td>\n",
       "      <td>0.011449</td>\n",
       "      <td>0.004161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.143425</td>\n",
       "      <td>0.064204</td>\n",
       "      <td>3.138845</td>\n",
       "      <td>35489248.0</td>\n",
       "      <td>2.600000</td>\n",
       "      <td>0.514913</td>\n",
       "      <td>0.092372</td>\n",
       "      <td>...</td>\n",
       "      <td>0.113479</td>\n",
       "      <td>0.488570</td>\n",
       "      <td>0.911455</td>\n",
       "      <td>0.767972</td>\n",
       "      <td>-0.153564</td>\n",
       "      <td>0.113378</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.355861</td>\n",
       "      <td>0.006205</td>\n",
       "      <td>0.003194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.158810</td>\n",
       "      <td>0.059129</td>\n",
       "      <td>3.567908</td>\n",
       "      <td>40922732.0</td>\n",
       "      <td>1.400000</td>\n",
       "      <td>0.596779</td>\n",
       "      <td>0.116061</td>\n",
       "      <td>...</td>\n",
       "      <td>0.086685</td>\n",
       "      <td>0.481198</td>\n",
       "      <td>0.367500</td>\n",
       "      <td>0.523341</td>\n",
       "      <td>-0.083029</td>\n",
       "      <td>0.053186</td>\n",
       "      <td>0.00002</td>\n",
       "      <td>0.232454</td>\n",
       "      <td>0.007335</td>\n",
       "      <td>0.004063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.168547</td>\n",
       "      <td>0.049648</td>\n",
       "      <td>2.329854</td>\n",
       "      <td>51921612.0</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.556160</td>\n",
       "      <td>0.143420</td>\n",
       "      <td>...</td>\n",
       "      <td>0.115372</td>\n",
       "      <td>0.488982</td>\n",
       "      <td>1.002424</td>\n",
       "      <td>0.376181</td>\n",
       "      <td>-0.172612</td>\n",
       "      <td>0.063815</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.140930</td>\n",
       "      <td>0.007345</td>\n",
       "      <td>0.003917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.196514</td>\n",
       "      <td>0.052237</td>\n",
       "      <td>2.566071</td>\n",
       "      <td>66282424.0</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>0.584508</td>\n",
       "      <td>0.100911</td>\n",
       "      <td>...</td>\n",
       "      <td>0.129901</td>\n",
       "      <td>0.513714</td>\n",
       "      <td>0.582648</td>\n",
       "      <td>0.699472</td>\n",
       "      <td>0.039179</td>\n",
       "      <td>0.088127</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.091799</td>\n",
       "      <td>0.009359</td>\n",
       "      <td>0.003582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2048</th>\n",
       "      <td>11</td>\n",
       "      <td>26</td>\n",
       "      <td>2</td>\n",
       "      <td>0.202177</td>\n",
       "      <td>0.050760</td>\n",
       "      <td>2.840705</td>\n",
       "      <td>51977460.0</td>\n",
       "      <td>1.800000</td>\n",
       "      <td>0.688834</td>\n",
       "      <td>0.090235</td>\n",
       "      <td>...</td>\n",
       "      <td>0.214162</td>\n",
       "      <td>0.682742</td>\n",
       "      <td>0.250832</td>\n",
       "      <td>0.806177</td>\n",
       "      <td>-0.042110</td>\n",
       "      <td>0.145387</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.269012</td>\n",
       "      <td>0.014044</td>\n",
       "      <td>0.004991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2049</th>\n",
       "      <td>11</td>\n",
       "      <td>26</td>\n",
       "      <td>3</td>\n",
       "      <td>0.174454</td>\n",
       "      <td>0.063426</td>\n",
       "      <td>5.202462</td>\n",
       "      <td>9471357.0</td>\n",
       "      <td>3.200000</td>\n",
       "      <td>0.661253</td>\n",
       "      <td>0.107627</td>\n",
       "      <td>...</td>\n",
       "      <td>0.092215</td>\n",
       "      <td>0.533371</td>\n",
       "      <td>0.969141</td>\n",
       "      <td>0.861597</td>\n",
       "      <td>-0.290169</td>\n",
       "      <td>0.091809</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.353269</td>\n",
       "      <td>0.011126</td>\n",
       "      <td>0.004529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2050</th>\n",
       "      <td>11</td>\n",
       "      <td>26</td>\n",
       "      <td>4</td>\n",
       "      <td>0.161152</td>\n",
       "      <td>0.074724</td>\n",
       "      <td>4.605277</td>\n",
       "      <td>7378860.5</td>\n",
       "      <td>2.600000</td>\n",
       "      <td>0.645111</td>\n",
       "      <td>0.093705</td>\n",
       "      <td>...</td>\n",
       "      <td>0.052282</td>\n",
       "      <td>0.702560</td>\n",
       "      <td>0.256100</td>\n",
       "      <td>0.829834</td>\n",
       "      <td>-0.254077</td>\n",
       "      <td>0.065565</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.319188</td>\n",
       "      <td>0.009205</td>\n",
       "      <td>0.004808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2051</th>\n",
       "      <td>11</td>\n",
       "      <td>26</td>\n",
       "      <td>5</td>\n",
       "      <td>0.192846</td>\n",
       "      <td>0.056795</td>\n",
       "      <td>2.563405</td>\n",
       "      <td>22641664.0</td>\n",
       "      <td>3.200000</td>\n",
       "      <td>0.680604</td>\n",
       "      <td>0.094989</td>\n",
       "      <td>...</td>\n",
       "      <td>0.178608</td>\n",
       "      <td>0.607663</td>\n",
       "      <td>0.255105</td>\n",
       "      <td>0.483378</td>\n",
       "      <td>-0.079091</td>\n",
       "      <td>0.188159</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.133573</td>\n",
       "      <td>0.013538</td>\n",
       "      <td>0.004881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2052</th>\n",
       "      <td>11</td>\n",
       "      <td>26</td>\n",
       "      <td>6</td>\n",
       "      <td>0.208580</td>\n",
       "      <td>0.087355</td>\n",
       "      <td>13.824711</td>\n",
       "      <td>8544824.0</td>\n",
       "      <td>2.322119</td>\n",
       "      <td>0.597944</td>\n",
       "      <td>0.172617</td>\n",
       "      <td>...</td>\n",
       "      <td>0.097579</td>\n",
       "      <td>0.278608</td>\n",
       "      <td>0.818272</td>\n",
       "      <td>0.796997</td>\n",
       "      <td>-0.158640</td>\n",
       "      <td>0.057194</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.254458</td>\n",
       "      <td>0.011825</td>\n",
       "      <td>0.005590</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2053 rows × 112 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      pianist_id  segment_id  snippet_id  essentia_dissonance_mean  \\\n",
       "0              1           0           0                  0.192237   \n",
       "1              1           0           1                  0.143425   \n",
       "2              1           0           3                  0.158810   \n",
       "3              1           0           4                  0.168547   \n",
       "4              1           0           5                  0.196514   \n",
       "...          ...         ...         ...                       ...   \n",
       "2048          11          26           2                  0.202177   \n",
       "2049          11          26           3                  0.174454   \n",
       "2050          11          26           4                  0.161152   \n",
       "2051          11          26           5                  0.192846   \n",
       "2052          11          26           6                  0.208580   \n",
       "\n",
       "      essentia_dissonance_stdev  essentia_dynamic_complexity  \\\n",
       "0                      0.059404                     2.040252   \n",
       "1                      0.064204                     3.138845   \n",
       "2                      0.059129                     3.567908   \n",
       "3                      0.049648                     2.329854   \n",
       "4                      0.052237                     2.566071   \n",
       "...                         ...                          ...   \n",
       "2048                   0.050760                     2.840705   \n",
       "2049                   0.063426                     5.202462   \n",
       "2050                   0.074724                     4.605277   \n",
       "2051                   0.056795                     2.563405   \n",
       "2052                   0.087355                    13.824711   \n",
       "\n",
       "      essentia_loudness  essentia_onset_rate  essentia_pitch_salience_mean  \\\n",
       "0            16079768.0             0.800000                      0.677256   \n",
       "1            35489248.0             2.600000                      0.514913   \n",
       "2            40922732.0             1.400000                      0.596779   \n",
       "3            51921612.0             1.600000                      0.556160   \n",
       "4            66282424.0             2.200000                      0.584508   \n",
       "...                 ...                  ...                           ...   \n",
       "2048         51977460.0             1.800000                      0.688834   \n",
       "2049          9471357.0             3.200000                      0.661253   \n",
       "2050          7378860.5             2.600000                      0.645111   \n",
       "2051         22641664.0             3.200000                      0.680604   \n",
       "2052          8544824.0             2.322119                      0.597944   \n",
       "\n",
       "      essentia_pitch_salience_stdev  ...  mirtoolbox_hcdf_pct_10  \\\n",
       "0                          0.095846  ...                0.077880   \n",
       "1                          0.092372  ...                0.113479   \n",
       "2                          0.116061  ...                0.086685   \n",
       "3                          0.143420  ...                0.115372   \n",
       "4                          0.100911  ...                0.129901   \n",
       "...                             ...  ...                     ...   \n",
       "2048                       0.090235  ...                0.214162   \n",
       "2049                       0.107627  ...                0.092215   \n",
       "2050                       0.093705  ...                0.052282   \n",
       "2051                       0.094989  ...                0.178608   \n",
       "2052                       0.172617  ...                0.097579   \n",
       "\n",
       "      mirtoolbox_hcdf_pct_90  mirtoolbox_irregularity  mirtoolbox_keyclarity  \\\n",
       "0                   0.357389                 0.685941               0.809092   \n",
       "1                   0.488570                 0.911455               0.767972   \n",
       "2                   0.481198                 0.367500               0.523341   \n",
       "3                   0.488982                 1.002424               0.376181   \n",
       "4                   0.513714                 0.582648               0.699472   \n",
       "...                      ...                      ...                    ...   \n",
       "2048                0.682742                 0.250832               0.806177   \n",
       "2049                0.533371                 0.969141               0.861597   \n",
       "2050                0.702560                 0.256100               0.829834   \n",
       "2051                0.607663                 0.255105               0.483378   \n",
       "2052                0.278608                 0.818272               0.796997   \n",
       "\n",
       "      mirtoolbox_mode  mirtoolbox_novelty_mean  mirtoolbox_novelty_pct_10  \\\n",
       "0           -0.092027                 0.041443                    0.00000   \n",
       "1           -0.153564                 0.113378                    0.00000   \n",
       "2           -0.083029                 0.053186                    0.00002   \n",
       "3           -0.172612                 0.063815                    0.00000   \n",
       "4            0.039179                 0.088127                    0.00000   \n",
       "...               ...                      ...                        ...   \n",
       "2048        -0.042110                 0.145387                    0.00000   \n",
       "2049        -0.290169                 0.091809                    0.00000   \n",
       "2050        -0.254077                 0.065565                    0.00000   \n",
       "2051        -0.079091                 0.188159                    0.00000   \n",
       "2052        -0.158640                 0.057194                    0.00000   \n",
       "\n",
       "      mirtoolbox_pulseclarity  mirtoolbox_roughness_mean  \\\n",
       "0                    0.169743                   0.011449   \n",
       "1                    0.355861                   0.006205   \n",
       "2                    0.232454                   0.007335   \n",
       "3                    0.140930                   0.007345   \n",
       "4                    0.091799                   0.009359   \n",
       "...                       ...                        ...   \n",
       "2048                 0.269012                   0.014044   \n",
       "2049                 0.353269                   0.011126   \n",
       "2050                 0.319188                   0.009205   \n",
       "2051                 0.133573                   0.013538   \n",
       "2052                 0.254458                   0.011825   \n",
       "\n",
       "      mirtoolbox_roughness_std  \n",
       "0                     0.004161  \n",
       "1                     0.003194  \n",
       "2                     0.004063  \n",
       "3                     0.003917  \n",
       "4                     0.003582  \n",
       "...                        ...  \n",
       "2048                  0.004991  \n",
       "2049                  0.004529  \n",
       "2050                  0.004808  \n",
       "2051                  0.004881  \n",
       "2052                  0.005590  \n",
       "\n",
       "[2053 rows x 112 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train = pd.read_csv(\"/scratch/nathanya.queby/mlpc/train_dataset.csv\")\n",
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2053,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([3, 3, 3, ..., 1, 1, 1])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train = pd.read_csv(\"/scratch/nathanya.queby/mlpc/train_targets.csv\", header=None)\n",
    "y_train = y_train[0].values.astype(\"int64\")\n",
    "print(y_train.shape)\n",
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pianist_id</th>\n",
       "      <th>segment_id</th>\n",
       "      <th>snippet_id</th>\n",
       "      <th>essentia_dissonance_mean</th>\n",
       "      <th>essentia_dissonance_stdev</th>\n",
       "      <th>essentia_dynamic_complexity</th>\n",
       "      <th>essentia_loudness</th>\n",
       "      <th>essentia_onset_rate</th>\n",
       "      <th>essentia_pitch_salience_mean</th>\n",
       "      <th>essentia_pitch_salience_stdev</th>\n",
       "      <th>...</th>\n",
       "      <th>mirtoolbox_hcdf_pct_10</th>\n",
       "      <th>mirtoolbox_hcdf_pct_90</th>\n",
       "      <th>mirtoolbox_irregularity</th>\n",
       "      <th>mirtoolbox_keyclarity</th>\n",
       "      <th>mirtoolbox_mode</th>\n",
       "      <th>mirtoolbox_novelty_mean</th>\n",
       "      <th>mirtoolbox_novelty_pct_10</th>\n",
       "      <th>mirtoolbox_pulseclarity</th>\n",
       "      <th>mirtoolbox_roughness_mean</th>\n",
       "      <th>mirtoolbox_roughness_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.146967</td>\n",
       "      <td>0.056205</td>\n",
       "      <td>2.019706</td>\n",
       "      <td>42130144.0</td>\n",
       "      <td>2.600000</td>\n",
       "      <td>0.560116</td>\n",
       "      <td>0.115359</td>\n",
       "      <td>...</td>\n",
       "      <td>0.126654</td>\n",
       "      <td>0.493207</td>\n",
       "      <td>0.740554</td>\n",
       "      <td>0.655391</td>\n",
       "      <td>-0.002827</td>\n",
       "      <td>0.143144</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.209162</td>\n",
       "      <td>0.007467</td>\n",
       "      <td>0.003986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>0.195762</td>\n",
       "      <td>0.054038</td>\n",
       "      <td>1.650751</td>\n",
       "      <td>65885464.0</td>\n",
       "      <td>4.373398</td>\n",
       "      <td>0.576964</td>\n",
       "      <td>0.095918</td>\n",
       "      <td>...</td>\n",
       "      <td>0.154411</td>\n",
       "      <td>0.455670</td>\n",
       "      <td>0.447020</td>\n",
       "      <td>0.661684</td>\n",
       "      <td>0.074573</td>\n",
       "      <td>0.141053</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.149663</td>\n",
       "      <td>0.011406</td>\n",
       "      <td>0.003618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>0.225943</td>\n",
       "      <td>0.058967</td>\n",
       "      <td>1.339994</td>\n",
       "      <td>156672624.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.648186</td>\n",
       "      <td>0.087664</td>\n",
       "      <td>...</td>\n",
       "      <td>0.139321</td>\n",
       "      <td>0.470631</td>\n",
       "      <td>0.274534</td>\n",
       "      <td>0.675268</td>\n",
       "      <td>-0.280677</td>\n",
       "      <td>0.081721</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.133185</td>\n",
       "      <td>0.015127</td>\n",
       "      <td>0.004930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>0.169778</td>\n",
       "      <td>0.065160</td>\n",
       "      <td>4.615561</td>\n",
       "      <td>67287496.0</td>\n",
       "      <td>1.852280</td>\n",
       "      <td>0.607226</td>\n",
       "      <td>0.102608</td>\n",
       "      <td>...</td>\n",
       "      <td>0.130897</td>\n",
       "      <td>0.472980</td>\n",
       "      <td>0.736538</td>\n",
       "      <td>0.813011</td>\n",
       "      <td>0.207040</td>\n",
       "      <td>0.069847</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.110838</td>\n",
       "      <td>0.011128</td>\n",
       "      <td>0.006774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0.226559</td>\n",
       "      <td>0.065521</td>\n",
       "      <td>1.705109</td>\n",
       "      <td>100496784.0</td>\n",
       "      <td>3.400000</td>\n",
       "      <td>0.621009</td>\n",
       "      <td>0.092719</td>\n",
       "      <td>...</td>\n",
       "      <td>0.139423</td>\n",
       "      <td>0.442981</td>\n",
       "      <td>0.426168</td>\n",
       "      <td>0.781752</td>\n",
       "      <td>0.157758</td>\n",
       "      <td>0.094246</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.157236</td>\n",
       "      <td>0.014241</td>\n",
       "      <td>0.004307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224</th>\n",
       "      <td>11</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>0.142812</td>\n",
       "      <td>0.065007</td>\n",
       "      <td>2.547269</td>\n",
       "      <td>16216005.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.555797</td>\n",
       "      <td>0.126262</td>\n",
       "      <td>...</td>\n",
       "      <td>0.090617</td>\n",
       "      <td>0.473097</td>\n",
       "      <td>0.836046</td>\n",
       "      <td>0.926008</td>\n",
       "      <td>0.099228</td>\n",
       "      <td>0.035435</td>\n",
       "      <td>0.000009</td>\n",
       "      <td>0.116657</td>\n",
       "      <td>0.008016</td>\n",
       "      <td>0.004037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>225</th>\n",
       "      <td>11</td>\n",
       "      <td>22</td>\n",
       "      <td>9</td>\n",
       "      <td>0.161294</td>\n",
       "      <td>0.059252</td>\n",
       "      <td>2.995837</td>\n",
       "      <td>29173024.0</td>\n",
       "      <td>3.400000</td>\n",
       "      <td>0.600145</td>\n",
       "      <td>0.110782</td>\n",
       "      <td>...</td>\n",
       "      <td>0.199239</td>\n",
       "      <td>0.552169</td>\n",
       "      <td>0.379475</td>\n",
       "      <td>0.636458</td>\n",
       "      <td>-0.029950</td>\n",
       "      <td>0.153426</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.185843</td>\n",
       "      <td>0.009054</td>\n",
       "      <td>0.004111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>226</th>\n",
       "      <td>11</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>0.265052</td>\n",
       "      <td>0.099702</td>\n",
       "      <td>1.549239</td>\n",
       "      <td>35251556.0</td>\n",
       "      <td>3.400000</td>\n",
       "      <td>0.610611</td>\n",
       "      <td>0.109219</td>\n",
       "      <td>...</td>\n",
       "      <td>0.158637</td>\n",
       "      <td>0.476680</td>\n",
       "      <td>0.403751</td>\n",
       "      <td>0.652105</td>\n",
       "      <td>0.127109</td>\n",
       "      <td>0.110063</td>\n",
       "      <td>0.004220</td>\n",
       "      <td>0.127996</td>\n",
       "      <td>0.018429</td>\n",
       "      <td>0.007174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>227</th>\n",
       "      <td>11</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>0.170429</td>\n",
       "      <td>0.064642</td>\n",
       "      <td>3.810143</td>\n",
       "      <td>13938461.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.669719</td>\n",
       "      <td>0.075449</td>\n",
       "      <td>...</td>\n",
       "      <td>0.045320</td>\n",
       "      <td>0.639122</td>\n",
       "      <td>0.263926</td>\n",
       "      <td>0.744871</td>\n",
       "      <td>0.236403</td>\n",
       "      <td>0.097617</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.156304</td>\n",
       "      <td>0.008120</td>\n",
       "      <td>0.005910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>228</th>\n",
       "      <td>11</td>\n",
       "      <td>25</td>\n",
       "      <td>9</td>\n",
       "      <td>0.150532</td>\n",
       "      <td>0.056817</td>\n",
       "      <td>1.831681</td>\n",
       "      <td>24733564.0</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.655701</td>\n",
       "      <td>0.086759</td>\n",
       "      <td>...</td>\n",
       "      <td>0.172692</td>\n",
       "      <td>0.409120</td>\n",
       "      <td>0.866557</td>\n",
       "      <td>0.776060</td>\n",
       "      <td>-0.177740</td>\n",
       "      <td>0.142798</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.208488</td>\n",
       "      <td>0.011329</td>\n",
       "      <td>0.004080</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>229 rows × 112 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     pianist_id  segment_id  snippet_id  essentia_dissonance_mean  \\\n",
       "0             1           0           2                  0.146967   \n",
       "1             1           6          12                  0.195762   \n",
       "2             1           7           4                  0.225943   \n",
       "3             1           8           3                  0.169778   \n",
       "4             1           9           1                  0.226559   \n",
       "..          ...         ...         ...                       ...   \n",
       "224          11          22           1                  0.142812   \n",
       "225          11          22           9                  0.161294   \n",
       "226          11          23           2                  0.265052   \n",
       "227          11          24           1                  0.170429   \n",
       "228          11          25           9                  0.150532   \n",
       "\n",
       "     essentia_dissonance_stdev  essentia_dynamic_complexity  \\\n",
       "0                     0.056205                     2.019706   \n",
       "1                     0.054038                     1.650751   \n",
       "2                     0.058967                     1.339994   \n",
       "3                     0.065160                     4.615561   \n",
       "4                     0.065521                     1.705109   \n",
       "..                         ...                          ...   \n",
       "224                   0.065007                     2.547269   \n",
       "225                   0.059252                     2.995837   \n",
       "226                   0.099702                     1.549239   \n",
       "227                   0.064642                     3.810143   \n",
       "228                   0.056817                     1.831681   \n",
       "\n",
       "     essentia_loudness  essentia_onset_rate  essentia_pitch_salience_mean  \\\n",
       "0           42130144.0             2.600000                      0.560116   \n",
       "1           65885464.0             4.373398                      0.576964   \n",
       "2          156672624.0             3.000000                      0.648186   \n",
       "3           67287496.0             1.852280                      0.607226   \n",
       "4          100496784.0             3.400000                      0.621009   \n",
       "..                 ...                  ...                           ...   \n",
       "224         16216005.0             3.000000                      0.555797   \n",
       "225         29173024.0             3.400000                      0.600145   \n",
       "226         35251556.0             3.400000                      0.610611   \n",
       "227         13938461.0             2.000000                      0.669719   \n",
       "228         24733564.0             1.600000                      0.655701   \n",
       "\n",
       "     essentia_pitch_salience_stdev  ...  mirtoolbox_hcdf_pct_10  \\\n",
       "0                         0.115359  ...                0.126654   \n",
       "1                         0.095918  ...                0.154411   \n",
       "2                         0.087664  ...                0.139321   \n",
       "3                         0.102608  ...                0.130897   \n",
       "4                         0.092719  ...                0.139423   \n",
       "..                             ...  ...                     ...   \n",
       "224                       0.126262  ...                0.090617   \n",
       "225                       0.110782  ...                0.199239   \n",
       "226                       0.109219  ...                0.158637   \n",
       "227                       0.075449  ...                0.045320   \n",
       "228                       0.086759  ...                0.172692   \n",
       "\n",
       "     mirtoolbox_hcdf_pct_90  mirtoolbox_irregularity  mirtoolbox_keyclarity  \\\n",
       "0                  0.493207                 0.740554               0.655391   \n",
       "1                  0.455670                 0.447020               0.661684   \n",
       "2                  0.470631                 0.274534               0.675268   \n",
       "3                  0.472980                 0.736538               0.813011   \n",
       "4                  0.442981                 0.426168               0.781752   \n",
       "..                      ...                      ...                    ...   \n",
       "224                0.473097                 0.836046               0.926008   \n",
       "225                0.552169                 0.379475               0.636458   \n",
       "226                0.476680                 0.403751               0.652105   \n",
       "227                0.639122                 0.263926               0.744871   \n",
       "228                0.409120                 0.866557               0.776060   \n",
       "\n",
       "     mirtoolbox_mode  mirtoolbox_novelty_mean  mirtoolbox_novelty_pct_10  \\\n",
       "0          -0.002827                 0.143144                   0.000000   \n",
       "1           0.074573                 0.141053                   0.000000   \n",
       "2          -0.280677                 0.081721                   0.000000   \n",
       "3           0.207040                 0.069847                   0.000000   \n",
       "4           0.157758                 0.094246                   0.000000   \n",
       "..               ...                      ...                        ...   \n",
       "224         0.099228                 0.035435                   0.000009   \n",
       "225        -0.029950                 0.153426                   0.000000   \n",
       "226         0.127109                 0.110063                   0.004220   \n",
       "227         0.236403                 0.097617                   0.000000   \n",
       "228        -0.177740                 0.142798                   0.000000   \n",
       "\n",
       "     mirtoolbox_pulseclarity  mirtoolbox_roughness_mean  \\\n",
       "0                   0.209162                   0.007467   \n",
       "1                   0.149663                   0.011406   \n",
       "2                   0.133185                   0.015127   \n",
       "3                   0.110838                   0.011128   \n",
       "4                   0.157236                   0.014241   \n",
       "..                       ...                        ...   \n",
       "224                 0.116657                   0.008016   \n",
       "225                 0.185843                   0.009054   \n",
       "226                 0.127996                   0.018429   \n",
       "227                 0.156304                   0.008120   \n",
       "228                 0.208488                   0.011329   \n",
       "\n",
       "     mirtoolbox_roughness_std  \n",
       "0                    0.003986  \n",
       "1                    0.003618  \n",
       "2                    0.004930  \n",
       "3                    0.006774  \n",
       "4                    0.004307  \n",
       "..                        ...  \n",
       "224                  0.004037  \n",
       "225                  0.004111  \n",
       "226                  0.007174  \n",
       "227                  0.005910  \n",
       "228                  0.004080  \n",
       "\n",
       "[229 rows x 112 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test = pd.read_csv(\"/scratch/nathanya.queby/mlpc/test_dataset.csv\")\n",
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(229,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([3, 1, 3, 4, 4, 3, 3, 2, 2, 3, 2, 4, 3, 3, 3, 1, 1, 4, 3, 3, 2, 2,\n",
       "       2, 2, 4, 1, 1, 1, 1, 1, 1, 4, 2, 2, 2, 2, 3, 1, 3, 4, 4, 4, 3, 1,\n",
       "       4, 3, 3, 2, 4, 4, 3, 3, 1, 3, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1,\n",
       "       2, 3, 4, 2, 1, 1, 4, 4, 3, 2, 2, 2, 3, 3, 3, 1, 4, 4, 4, 4, 4, 2,\n",
       "       1, 1, 1, 1, 4, 4, 3, 3, 3, 2, 2, 3, 4, 3, 4, 4, 3, 4, 4, 1, 4, 4,\n",
       "       4, 4, 1, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 4, 4, 4, 4, 1, 1, 2, 1, 3,\n",
       "       3, 2, 4, 4, 1, 1, 4, 4, 1, 4, 3, 3, 2, 2, 2, 3, 2, 2, 3, 3, 3, 3,\n",
       "       4, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 2, 3, 2, 3, 3, 3,\n",
       "       3, 3, 4, 4, 1, 1, 4, 3, 3, 3, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 3,\n",
       "       4, 1, 1, 1, 4, 4, 3, 3, 3, 1, 4, 1, 1, 4, 4, 4, 4, 4, 2, 2, 3, 1,\n",
       "       1, 1, 1, 1, 4, 4, 4, 4, 4])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test = pd.read_csv(\"/scratch/nathanya.queby/mlpc/test_targets.csv\", header=None)\n",
    "y_test = y_test[0].values.astype(\"int64\")\n",
    "print(y_test.shape)\n",
    "y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "models = [\n",
    "          ('RF', RandomForestClassifier()),\n",
    "          ('KNN', KNeighborsClassifier()),\n",
    "          ('SVM', SVC()), \n",
    "          ('GNB', GaussianNB()),\n",
    "          ('XGB', XGBClassifier()),\n",
    "          ('ADA', AdaBoostClassifier())\n",
    "        ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs = []\n",
    "results = []\n",
    "names = []\n",
    "scoring = ['accuracy', 'precision_weighted', 'recall_weighted', 'f1_weighted']\n",
    "target_names = [\"1\", \"2\", \"3\", \"4\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RF\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.46      0.51      0.49        49\n",
      "           2       0.51      0.51      0.51        43\n",
      "           3       0.58      0.45      0.51        64\n",
      "           4       0.60      0.67      0.63        73\n",
      "\n",
      "    accuracy                           0.55       229\n",
      "   macro avg       0.54      0.54      0.53       229\n",
      "weighted avg       0.55      0.55      0.54       229\n",
      "\n",
      "KNN\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.32      0.39      0.35        49\n",
      "           2       0.29      0.23      0.26        43\n",
      "           3       0.34      0.39      0.36        64\n",
      "           4       0.40      0.33      0.36        73\n",
      "\n",
      "    accuracy                           0.34       229\n",
      "   macro avg       0.34      0.33      0.33       229\n",
      "weighted avg       0.34      0.34      0.34       229\n",
      "\n",
      "SVM\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.29      0.29      0.29        49\n",
      "           2       0.48      0.26      0.33        43\n",
      "           3       0.00      0.00      0.00        64\n",
      "           4       0.37      0.79      0.50        73\n",
      "\n",
      "    accuracy                           0.36       229\n",
      "   macro avg       0.28      0.33      0.28       229\n",
      "weighted avg       0.27      0.36      0.28       229\n",
      "\n",
      "GNB\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.33      0.14      0.20        49\n",
      "           2       0.48      0.23      0.31        43\n",
      "           3       0.22      0.03      0.05        64\n",
      "           4       0.37      0.89      0.52        73\n",
      "\n",
      "    accuracy                           0.37       229\n",
      "   macro avg       0.35      0.32      0.27       229\n",
      "weighted avg       0.34      0.37      0.28       229\n",
      "\n",
      "XGB\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.48      0.51      0.50        49\n",
      "           2       0.62      0.65      0.64        43\n",
      "           3       0.59      0.50      0.54        64\n",
      "           4       0.65      0.70      0.68        73\n",
      "\n",
      "    accuracy                           0.59       229\n",
      "   macro avg       0.59      0.59      0.59       229\n",
      "weighted avg       0.59      0.59      0.59       229\n",
      "\n",
      "ADA\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.30      0.27      0.28        49\n",
      "           2       0.50      0.44      0.47        43\n",
      "           3       0.48      0.47      0.47        64\n",
      "           4       0.52      0.60      0.56        73\n",
      "\n",
      "    accuracy                           0.46       229\n",
      "   macro avg       0.45      0.44      0.45       229\n",
      "weighted avg       0.46      0.46      0.46       229\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for name, model in models:\n",
    "    cv_results = model_selection.cross_validate(model, X_train, y_train, scoring=scoring)\n",
    "    clf = model.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    print(name)\n",
    "    print(classification_report(y_test, y_pred, target_names=target_names))\n",
    "\n",
    "    results.append(cv_results)\n",
    "    names.append(name)\n",
    "\n",
    "    this_df = pd.DataFrame(cv_results)\n",
    "    this_df['model'] = name\n",
    "    dfs.append(this_df)\n",
    "\n",
    "    final = pd.concat(dfs, ignore_index=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaluate results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "bootstraps = []\n",
    "for model in list(set(final.model.values)):\n",
    "    model_df = final.loc[final.model == model]\n",
    "    bootstrap = model_df.sample(n=30, replace=True)\n",
    "    bootstraps.append(bootstrap)\n",
    "        \n",
    "bootstrap_df = pd.concat(bootstraps, ignore_index=True)\n",
    "results_long = pd.melt(bootstrap_df,id_vars=['model'],var_name='metrics', value_name='values')\n",
    "time_metrics = ['fit_time','score_time'] # fit time metrics\n",
    "\n",
    "## PERFORMANCE METRICS\n",
    "results_long_nofit = results_long.loc[~results_long['metrics'].isin(time_metrics)] # get df without fit data\n",
    "results_long_nofit = results_long_nofit.sort_values(by='values')\n",
    "\n",
    "## TIME METRICS\n",
    "results_long_fit = results_long.loc[results_long['metrics'].isin(time_metrics)] # df with fit data\n",
    "results_long_fit = results_long_fit.sort_values(by='values')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1440x864 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20, 12))\n",
    "sns.set(font_scale=2.5)\n",
    "g = sns.boxplot(x=\"model\", y=\"values\", hue=\"metrics\", data=results_long_nofit, palette=\"Set3\")\n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "plt.title('Comparison of Model by Classification Metric')\n",
    "plt.savefig('./benchmark_models_performance.png',dpi=300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">test_precision_weighted</th>\n",
       "      <th colspan=\"2\" halign=\"left\">test_accuracy</th>\n",
       "      <th colspan=\"2\" halign=\"left\">test_f1_weighted</th>\n",
       "      <th colspan=\"2\" halign=\"left\">test_recall_weighted</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>std</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ADA</th>\n",
       "      <td>0.069744</td>\n",
       "      <td>0.480498</td>\n",
       "      <td>0.033413</td>\n",
       "      <td>0.426712</td>\n",
       "      <td>0.076848</td>\n",
       "      <td>0.390001</td>\n",
       "      <td>0.033413</td>\n",
       "      <td>0.426712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GNB</th>\n",
       "      <td>0.040014</td>\n",
       "      <td>0.312295</td>\n",
       "      <td>0.027999</td>\n",
       "      <td>0.382572</td>\n",
       "      <td>0.029764</td>\n",
       "      <td>0.292631</td>\n",
       "      <td>0.027999</td>\n",
       "      <td>0.382572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KNN</th>\n",
       "      <td>0.010667</td>\n",
       "      <td>0.339973</td>\n",
       "      <td>0.008247</td>\n",
       "      <td>0.332552</td>\n",
       "      <td>0.008119</td>\n",
       "      <td>0.332143</td>\n",
       "      <td>0.008247</td>\n",
       "      <td>0.332552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RF</th>\n",
       "      <td>0.049147</td>\n",
       "      <td>0.456968</td>\n",
       "      <td>0.055535</td>\n",
       "      <td>0.443659</td>\n",
       "      <td>0.074509</td>\n",
       "      <td>0.419188</td>\n",
       "      <td>0.055535</td>\n",
       "      <td>0.443659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SVM</th>\n",
       "      <td>0.019454</td>\n",
       "      <td>0.302613</td>\n",
       "      <td>0.038760</td>\n",
       "      <td>0.393972</td>\n",
       "      <td>0.038356</td>\n",
       "      <td>0.314360</td>\n",
       "      <td>0.038760</td>\n",
       "      <td>0.393972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XGB</th>\n",
       "      <td>0.086642</td>\n",
       "      <td>0.488179</td>\n",
       "      <td>0.053558</td>\n",
       "      <td>0.422396</td>\n",
       "      <td>0.084610</td>\n",
       "      <td>0.386839</td>\n",
       "      <td>0.053558</td>\n",
       "      <td>0.422396</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      test_precision_weighted           test_accuracy            \\\n",
       "                          std      mean           std      mean   \n",
       "model                                                             \n",
       "ADA                  0.069744  0.480498      0.033413  0.426712   \n",
       "GNB                  0.040014  0.312295      0.027999  0.382572   \n",
       "KNN                  0.010667  0.339973      0.008247  0.332552   \n",
       "RF                   0.049147  0.456968      0.055535  0.443659   \n",
       "SVM                  0.019454  0.302613      0.038760  0.393972   \n",
       "XGB                  0.086642  0.488179      0.053558  0.422396   \n",
       "\n",
       "      test_f1_weighted           test_recall_weighted            \n",
       "                   std      mean                  std      mean  \n",
       "model                                                            \n",
       "ADA           0.076848  0.390001             0.033413  0.426712  \n",
       "GNB           0.029764  0.292631             0.027999  0.382572  \n",
       "KNN           0.008119  0.332143             0.008247  0.332552  \n",
       "RF            0.074509  0.419188             0.055535  0.443659  \n",
       "SVM           0.038356  0.314360             0.038760  0.393972  \n",
       "XGB           0.084610  0.386839             0.053558  0.422396  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics = list(set(results_long_nofit.metrics.values))\n",
    "bootstrap_df.groupby(['model'])[metrics].agg([np.std, np.mean])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">fit_time</th>\n",
       "      <th colspan=\"2\" halign=\"left\">score_time</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>std</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ADA</th>\n",
       "      <td>0.002298</td>\n",
       "      <td>0.797433</td>\n",
       "      <td>0.000098</td>\n",
       "      <td>0.012014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GNB</th>\n",
       "      <td>0.000505</td>\n",
       "      <td>0.003638</td>\n",
       "      <td>0.000066</td>\n",
       "      <td>0.003450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KNN</th>\n",
       "      <td>0.000161</td>\n",
       "      <td>0.003223</td>\n",
       "      <td>0.003433</td>\n",
       "      <td>0.064878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RF</th>\n",
       "      <td>0.010574</td>\n",
       "      <td>0.780675</td>\n",
       "      <td>0.000385</td>\n",
       "      <td>0.015480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SVM</th>\n",
       "      <td>0.001804</td>\n",
       "      <td>0.152531</td>\n",
       "      <td>0.000450</td>\n",
       "      <td>0.048849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XGB</th>\n",
       "      <td>0.016073</td>\n",
       "      <td>3.057899</td>\n",
       "      <td>0.000661</td>\n",
       "      <td>0.009259</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       fit_time           score_time          \n",
       "            std      mean        std      mean\n",
       "model                                         \n",
       "ADA    0.002298  0.797433   0.000098  0.012014\n",
       "GNB    0.000505  0.003638   0.000066  0.003450\n",
       "KNN    0.000161  0.003223   0.003433  0.064878\n",
       "RF     0.010574  0.780675   0.000385  0.015480\n",
       "SVM    0.001804  0.152531   0.000450  0.048849\n",
       "XGB    0.016073  3.057899   0.000661  0.009259"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_metrics = list(set(results_long_fit.metrics.values))\n",
    "bootstrap_df.groupby(['model'])[time_metrics].agg([np.std, np.mean])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 16 candidates, totalling 80 fits\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.4s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.3s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.3s\n",
      "{'C': 0.1, 'gamma': 1, 'kernel': 'rbf'}\n",
      "SVC(C=0.1, gamma=1)\n"
     ]
    }
   ],
   "source": [
    "param_grid = {'C': [0.1, 1, 10, 100],\n",
    "            'gamma': [1, 0.1, 0.01, 0.001],\n",
    "            'kernel': ['rbf']}\n",
    "\n",
    "grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=2)\n",
    "grid.fit(X_train,y_train)\n",
    "\n",
    "print(grid.best_params_)\n",
    "print(grid.best_estimator_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  0  0 49]\n",
      " [ 0  0  0 43]\n",
      " [ 0  0  0 64]\n",
      " [ 0  0  0 73]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.00      0.00      0.00        49\n",
      "           2       0.00      0.00      0.00        43\n",
      "           3       0.00      0.00      0.00        64\n",
      "           4       0.32      1.00      0.48        73\n",
      "\n",
      "    accuracy                           0.32       229\n",
      "   macro avg       0.08      0.25      0.12       229\n",
      "weighted avg       0.10      0.32      0.15       229\n",
      "\n"
     ]
    }
   ],
   "source": [
    "grid_predictions = grid.predict(X_test)\n",
    "print(confusion_matrix(y_test,grid_predictions))\n",
    "print(classification_report(y_test,grid_predictions))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 1.00\n"
     ]
    }
   ],
   "source": [
    "dmatrix = xgb.DMatrix(X_train,y_train)\n",
    "\n",
    "params={'objective':'reg:squarederror'}\n",
    "cv_results = xgb.cv(dtrain=dmatrix,\n",
    "                    params=params,\n",
    "                    metrics={'rmse'},\n",
    "                    as_pandas=True,\n",
    "                    seed=20)\n",
    "print('RMSE: %.2f' % cv_results['test-rmse-mean'].min())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 54 candidates, totalling 270 fits\n",
      "[19:16:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:16:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:16:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:16:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:16:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:16:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:16:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:16:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:16:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:16:58] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:09] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:09] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:09] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:09] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:10] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:11] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:11] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:11] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:11] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:11] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:12] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:12] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:12] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:12] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:12] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:12] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:12] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:12] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:13] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:13] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:15] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:15] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:15] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:15] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:15] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:15] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:15] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:16] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:16] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:16] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:18] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:18] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:18] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:18] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:19] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:20] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:20] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:20] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:20] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:20] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:21] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:21] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:21] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:21] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:21] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:22] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:22] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:22] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:22] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:22] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:25] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:25] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:26] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:26] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:26] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:26] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:26] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:26] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:26] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:26] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:27] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:28] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:28] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:28] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:29] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:29] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:29] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:29] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:29] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:29] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:30] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:30] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:30] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:30] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:30] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:33] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:35] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:35] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:35] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:35] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:35] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:36] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:36] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:36] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:36] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:37] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:38] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:39] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:40] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:40] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:42] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:42] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:42] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:42] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:42] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:44] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:44] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:44] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:44] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:44] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:45] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:46] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:46] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:46] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:46] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:46] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:46] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:46] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:46] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:46] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:47] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:47] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:47] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:47] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:47] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:49] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:49] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:49] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:49] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:49] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:50] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:50] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:50] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:50] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:50] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:53] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:53] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:53] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:53] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:53] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:55] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:55] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:55] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:55] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:55] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:17:57] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:03] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:04] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:04] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:04] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:04] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:06] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:06] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:06] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:06] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:06] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:06] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:07] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:07] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:07] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:07] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:09] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:10] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:10] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:10] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:10] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:15] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:15] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:15] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:16] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:16] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:16] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:17] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:17] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:17] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:17] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:22] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:22] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:22] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:22] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:22] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:23] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:23] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:23] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:23] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:23] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:24] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:25] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:25] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:25] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:25] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:32] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:32] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:32] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:33] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:33] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:34] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:35] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:35] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:35] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:35] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:37] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:38] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:38] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:38] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:38] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:41] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:41] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:41] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:42] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:42] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:42] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:42] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:43] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:44] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:48] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:48] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:48] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:49] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:49] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:50] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:50] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:50] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:51] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:51] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:52] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:52] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:52] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:52] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:52] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[19:18:58] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "Best parameters: {'colsample_bytree': 0.3, 'learning_rate': 0.01, 'max_depth': 3, 'n_estimators': 1000}\n",
      "Lowest RMSE:  1.031030988213364\n"
     ]
    }
   ],
   "source": [
    "params = { 'max_depth': [3,6,10],\n",
    "           'learning_rate': [0.01, 0.05, 0.1],\n",
    "           'n_estimators': [100, 500, 1000],\n",
    "           'colsample_bytree': [0.3, 0.7]}\n",
    "\n",
    "xgbr = xgb.XGBRegressor(seed = 20)\n",
    "clf = GridSearchCV(estimator=xgbr, \n",
    "                   param_grid=params,\n",
    "                   scoring='neg_mean_squared_error', \n",
    "                   verbose=1,\n",
    "                   n_jobs=10)\n",
    "\n",
    "clf.fit(X_train, y_train)\n",
    "print(\"Best parameters:\", clf.best_params_)\n",
    "print(\"Lowest RMSE: \", (-clf.best_score_)**(1/2.0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# AdaBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 80 candidates, totalling 400 fits\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.436 total time=   0.3s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.484 total time=   0.3s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.372 total time=   0.3s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.449 total time=   0.3s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.363 total time=   0.3s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.404 total time=   1.5s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.431 total time=   1.5s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.506 total time=   1.5s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.388 total time=   1.5s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.441 total time=   1.5s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.404 total time=   7.5s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.450 total time=   7.5s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.471 total time=   7.5s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.402 total time=   7.6s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.491 total time=   7.7s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.416 total time=   0.3s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.411 total time=   0.3s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.487 total time=   0.3s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.480 total time=   0.3s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.373 total time=   0.3s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.418 total time=   1.5s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.406 total time=   1.5s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.491 total time=   1.5s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.466 total time=   1.5s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.400 total time=   1.5s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.404 total time=   7.5s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.506 total time=   7.5s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.333 total time=   7.6s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.427 total time=   7.5s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.412 total time=   7.5s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.428 total time=  30.0s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.423 total time=  30.0s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.494 total time=  30.0s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.402 total time=  30.0s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.424 total time=  30.1s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.372 total time=   0.3s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.436 total time=   0.3s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.484 total time=   0.3s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.449 total time=   0.3s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.363 total time=   0.3s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.404 total time=   1.5s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.431 total time=   1.5s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.506 total time=   1.5s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.441 total time=   1.5s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.388 total time=   1.5s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.406 total time=   7.4s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.450 total time=   7.5s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.491 total time=   7.5s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.398 total time=   7.5s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.473 total time=   7.5s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.421 total time=  30.0s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.343 total time=  30.0s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.416 total time=   0.3s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.412 total time=  30.1s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.411 total time=   0.3s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.405 total time=  30.1s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.477 total time=  30.4s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.487 total time=   0.3s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.480 total time=   0.3s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.373 total time=   0.3s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.418 total time=   1.5s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.406 total time=   1.5s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.477 total time=   1.5s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.471 total time=   1.5s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.390 total time=   1.5s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.411 total time=   7.5s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.470 total time=   7.5s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.377 total time=   7.5s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.422 total time=   7.5s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.415 total time=   7.6s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.428 total time=  29.9s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.414 total time=  29.9s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.499 total time=  29.9s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.417 total time=  29.9s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.410 total time=  30.0s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.397 total time=   0.6s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.494 total time=   0.6s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.499 total time=   0.6s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.459 total time=   0.6s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.385 total time=   0.6s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.416 total time=   2.8s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.421 total time=   2.8s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.552 total time=   2.7s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.441 total time=   2.8s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.427 total time=   2.8s\n",
      "[CV 2/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.336 total time=  29.8s\n",
      "[CV 1/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.401 total time=  30.0s\n",
      "[CV 4/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.427 total time=  30.0s\n",
      "[CV 3/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.470 total time=  30.1s\n",
      "[CV 5/5] END base_estimator__max_depth=2, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.395 total time=  30.0s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.428 total time=  13.8s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.428 total time=  13.8s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.487 total time=  13.7s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.437 total time=  13.8s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.415 total time=  13.8s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.465 total time=   0.6s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.428 total time=   0.6s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.506 total time=   0.6s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.439 total time=   0.6s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.398 total time=   0.6s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.426 total time=   2.8s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.448 total time=   2.8s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.448 total time=   2.8s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.446 total time=   2.8s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.412 total time=   2.8s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.457 total time=  13.8s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.389 total time=  13.9s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.494 total time=  13.9s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.427 total time=  13.9s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.461 total time=  13.9s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.431 total time=  55.0s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.421 total time=  55.2s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.465 total time=  55.2s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.397 total time=   0.6s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.437 total time=  55.4s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.489 total time=   0.6s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.523 total time=   0.5s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.407 total time=  55.7s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.463 total time=   0.6s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.393 total time=   0.5s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.465 total time=   2.7s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.445 total time=   2.7s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.538 total time=   2.7s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.427 total time=   2.8s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.400 total time=   2.7s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.448 total time=  13.7s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.421 total time=  13.7s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.509 total time=  13.6s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.373 total time=  13.6s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.456 total time=  13.8s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.457 total time=  55.1s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.416 total time=  55.4s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.482 total time=   0.6s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.487 total time=  55.7s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.439 total time=  55.6s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.467 total time=   0.6s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.422 total time=  55.7s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.431 total time=   0.5s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.507 total time=   0.6s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.429 total time=   0.6s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.457 total time=   2.8s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.411 total time=   2.7s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.453 total time=   2.7s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.459 total time=   2.8s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.417 total time=   2.7s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.431 total time=  13.7s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.341 total time=  13.7s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.467 total time=  13.7s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.446 total time=  13.8s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.427 total time=  13.8s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.443 total time=  54.6s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.421 total time=  54.7s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.501 total time=  54.8s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.463 total time=  54.9s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.377 total time=   0.8s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.392 total time=   0.8s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.465 total time=   0.8s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.446 total time=  55.5s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.459 total time=   0.8s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.376 total time=   0.8s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.387 total time=   3.8s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.411 total time=   3.8s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.509 total time=   3.8s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.441 total time=   3.8s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.427 total time=   3.9s\n",
      "[CV 1/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.418 total time=  54.9s\n",
      "[CV 2/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.392 total time=  55.0s\n",
      "[CV 3/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.472 total time=  55.3s\n",
      "[CV 4/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.417 total time=  55.3s\n",
      "[CV 5/5] END base_estimator__max_depth=4, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.390 total time=  55.2s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.431 total time=  19.1s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.552 total time=  19.0s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.443 total time=  19.3s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.399 total time=   0.8s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.427 total time=  19.3s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.448 total time=   0.8s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.422 total time=  19.4s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.426 total time=   0.8s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.427 total time=   0.8s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.388 total time=   0.8s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.445 total time=   3.8s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.387 total time=   3.8s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.496 total time=   3.9s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.395 total time=   3.9s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.427 total time=   3.9s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.443 total time=  19.1s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.418 total time=  19.2s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.504 total time=  19.1s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.407 total time=  19.2s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.480 total time=  19.3s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.450 total time= 1.3min\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.465 total time= 1.3min\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.560 total time= 1.3min\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.392 total time=   0.7s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.437 total time= 1.3min\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.401 total time=   0.8s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.499 total time=   0.8s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.393 total time= 1.3min\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.454 total time=   0.8s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.398 total time=   0.8s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.450 total time=   3.7s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.443 total time=   3.8s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.470 total time=   3.7s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.505 total time=   3.8s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.429 total time=   3.8s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.426 total time=  18.6s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.421 total time=  18.7s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.501 total time=  18.7s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.449 total time=  18.7s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.424 total time=  18.7s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.448 total time= 1.3min\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.453 total time= 1.3min\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.490 total time= 1.3min\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.410 total time= 1.3min\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.521 total time= 1.3min\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.450 total time=   0.8s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.387 total time=   0.8s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.489 total time=   0.8s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.429 total time=   0.8s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.390 total time=   0.8s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.426 total time=   3.7s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.426 total time=   3.8s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.511 total time=   3.8s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.461 total time=   3.8s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.412 total time=   3.8s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.428 total time=  18.7s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.377 total time=  18.7s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.504 total time=  19.0s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.454 total time=  18.9s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.424 total time=  18.9s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.421 total time= 1.2min\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.453 total time= 1.2min\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.484 total time= 1.2min\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.407 total time= 1.2min\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.495 total time= 1.2min\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.360 total time=   0.9s\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.397 total time=   0.9s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.513 total time=   1.0s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.446 total time=   0.9s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.359 total time=   0.9s\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.331 total time=   4.7s\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.491 total time=   4.6s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.523 total time=   4.6s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.463 total time=   4.7s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.400 total time=   4.6s\n",
      "[CV 1/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.428 total time= 1.2min\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.392 total time=  23.5s\n",
      "[CV 2/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.421 total time= 1.2min\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.511 total time=  23.5s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.402 total time=  23.3s\n",
      "[CV 3/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.560 total time= 1.2min\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.461 total time=  23.5s\n",
      "[CV 4/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.468 total time= 1.3min\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.418 total time=  23.8s\n",
      "[CV 5/5] END base_estimator__max_depth=6, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.432 total time= 1.3min\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.365 total time=   1.0s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.438 total time=   0.9s\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.418 total time=   0.9s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.456 total time=   1.0s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.368 total time=   0.9s\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.411 total time=   4.8s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.455 total time=   4.8s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.422 total time=   4.8s\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.428 total time=   4.9s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.417 total time=   4.8s\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.401 total time=  24.1s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.526 total time=  24.1s\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.440 total time=  24.3s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.483 total time=  24.3s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.380 total time=  25.4s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.516 total time= 1.6min\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.392 total time=   0.9s\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.489 total time= 1.6min\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.424 total time= 1.6min\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.421 total time= 1.6min\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.406 total time=   0.9s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.538 total time=   0.9s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.466 total time=   0.9s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.393 total time=   0.9s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.434 total time= 1.6min\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.455 total time=   4.4s\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.418 total time=   4.4s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.562 total time=   4.4s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.468 total time=   4.5s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.427 total time=   4.5s\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.372 total time=  22.3s\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.438 total time=  23.1s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.574 total time=  22.7s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.420 total time=  22.5s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.439 total time=  23.1s\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.462 total time= 1.6min\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.406 total time=   0.9s\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.414 total time= 1.6min\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.440 total time=   0.9s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.530 total time= 1.6min\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.399 total time=   0.9s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.402 total time= 1.6min\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.402 total time=   0.9s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.471 total time= 1.7min\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.412 total time=   0.9s\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.431 total time=   4.5s\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.406 total time=   4.5s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.462 total time=   4.4s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.422 total time=   4.6s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.424 total time=   4.5s\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.387 total time=  22.4s\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.375 total time=  22.8s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.479 total time=  23.0s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.402 total time=  22.6s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.461 total time=  23.0s\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.401 total time= 1.5min\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.418 total time= 1.5min\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.399 total time=   1.0s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.451 total time= 1.5min\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.440 total time=   1.0s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.504 total time=   1.0s\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.480 total time=   1.0s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=10;, score=0.356 total time=   1.0s\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.400 total time= 1.5min\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.560 total time= 1.6min\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.423 total time=   5.1s\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.363 total time=   5.2s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.564 total time=   5.2s\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.480 total time=   5.2s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=50;, score=0.371 total time=   5.2s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.557 total time=  26.6s\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.462 total time=  26.7s\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.421 total time=  27.0s\n",
      "[CV 3/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.487 total time= 1.5min\n",
      "[CV 1/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.423 total time= 1.5min\n",
      "[CV 5/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.395 total time= 1.5min\n",
      "[CV 2/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.397 total time= 1.5min\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.478 total time=  27.5s\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.328 total time=   1.1s\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.397 total time=   1.1s\n",
      "[CV 4/5] END base_estimator__max_depth=8, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.429 total time= 1.5min\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.455 total time=   1.1s\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.439 total time=   1.1s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=10;, score=0.371 total time=   1.1s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=250;, score=0.427 total time=  28.1s\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.411 total time=   5.6s\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.411 total time=   5.8s\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.466 total time=   5.7s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.465 total time=   5.9s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=50;, score=0.371 total time=   5.7s\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.449 total time=  28.0s\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.370 total time=  29.1s\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.382 total time=  29.6s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.487 total time=  29.6s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=250;, score=0.405 total time=  29.6s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.400 total time= 1.9min\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.392 total time=   0.9s\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.426 total time= 1.9min\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.404 total time=   1.0s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.552 total time=   1.0s\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.456 total time=   1.0s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=10;, score=0.361 total time=   1.0s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.516 total time= 1.9min\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.477 total time= 1.9min\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.01, n_estimators=1000;, score=0.478 total time= 2.0min\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.433 total time=   4.8s\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.426 total time=   4.8s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.523 total time=   4.8s\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.498 total time=   5.1s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=50;, score=0.378 total time=   5.0s\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.411 total time=  25.5s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.477 total time=  25.2s\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.428 total time=  25.4s\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.466 total time=  25.6s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=250;, score=0.402 total time=  25.2s\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.384 total time= 1.9min\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.450 total time= 1.9min\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.424 total time= 1.9min\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.526 total time= 1.9min\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.392 total time=   1.0s\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.377 total time=   1.0s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.491 total time=   1.0s\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.444 total time=   1.0s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=10;, score=0.390 total time=   1.0s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=5, learning_rate=0.1, n_estimators=1000;, score=0.417 total time= 1.9min\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.389 total time=   5.0s\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.380 total time=   5.2s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.528 total time=   5.2s\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.427 total time=   5.1s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=50;, score=0.363 total time=   5.1s\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.528 total time=  25.4s\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.491 total time=  26.3s\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.438 total time=  26.7s\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.485 total time=  26.6s\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=250;, score=0.385 total time=  25.1s\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.409 total time= 1.7min\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.456 total time= 1.7min\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.467 total time= 1.8min\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.538 total time= 1.8min\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.01, n_estimators=1000;, score=0.398 total time= 1.8min\n",
      "[CV 2/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.411 total time= 1.7min\n",
      "[CV 3/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.530 total time= 1.7min\n",
      "[CV 1/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.431 total time= 1.7min\n",
      "[CV 4/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.446 total time= 1.8min\n",
      "[CV 5/5] END base_estimator__max_depth=10, base_estimator__min_samples_leaf=10, learning_rate=0.1, n_estimators=1000;, score=0.437 total time= 1.8min\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(estimator=AdaBoostClassifier(base_estimator=DecisionTreeClassifier()),\n",
       "             n_jobs=10,\n",
       "             param_grid={'base_estimator__max_depth': [2, 4, 6, 8, 10],\n",
       "                         'base_estimator__min_samples_leaf': [5, 10],\n",
       "                         'learning_rate': [0.01, 0.1],\n",
       "                         'n_estimators': [10, 50, 250, 1000]},\n",
       "             scoring='f1_micro', verbose=3)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abc = AdaBoostClassifier(base_estimator=DecisionTreeClassifier())\n",
    "\n",
    "parameters = {'base_estimator__max_depth':[i for i in range(2,11,2)],\n",
    "              'base_estimator__min_samples_leaf':[5,10],\n",
    "              'n_estimators':[10,50,250,1000],\n",
    "              'learning_rate':[0.01,0.1]}\n",
    "\n",
    "clf = GridSearchCV(abc, parameters, verbose=3, scoring='f1_micro', n_jobs=10)\n",
    "clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'base_estimator__max_depth': 10, 'base_estimator__min_samples_leaf': 5, 'learning_rate': 0.01, 'n_estimators': 250}\n",
      "Lowest RMSE:  0.46905346863687614\n"
     ]
    }
   ],
   "source": [
    "print(\"Best parameters:\", clf.best_params_)\n",
    "print(\"Lowest RMSE: \", clf.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.53      0.63      0.57        49\n",
      "           2       0.62      0.60      0.61        43\n",
      "           3       0.80      0.55      0.65        64\n",
      "           4       0.64      0.74      0.69        73\n",
      "\n",
      "    accuracy                           0.64       229\n",
      "   macro avg       0.65      0.63      0.63       229\n",
      "weighted avg       0.66      0.64      0.64       229\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred = clf.predict(X_test)\n",
    "print(classification_report(y_test, y_pred, target_names=target_names))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Source\n",
    "\n",
    "<!-- @software{reback2020pandas,\n",
    "    author       = {The pandas development team},\n",
    "    title        = {pandas-dev/pandas: Pandas},\n",
    "    month        = feb,\n",
    "    year         = 2020,\n",
    "    publisher    = {Zenodo},\n",
    "    version      = {latest},\n",
    "    doi          = {10.5281/zenodo.3509134},\n",
    "    url          = {https://doi.org/10.5281/zenodo.3509134}\n",
    "} -->"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
